NETWORK_SCANNER

Устройства A B C D ROUTER

	- A # RED host (hacker)

	- B
	# IP: 10.0.15.5
	# MAC: 00:11:22:33:44:55
 
	- C
	# IP: 10.0.15.6 
	# MAC: 00:11:22:33:44:66

	- D
	# IP: 10.0.15.7 
	# MAC: 00:11:22:33:44:77

	- ROUTER 
	# IP: 10.0.15.1
	# MAC: 00:11:22:33:44:20
	
Для установления mac-адреса устройства,
используется протокол ARP

	ARP - протокол определения адреса

	A -> отправляет широковещательное
	сообщение ARP REQUEST
	WHO HAS 10.0.15.6 # у кого этот ip
	 # пакет будет отправлен на широковещательный адрес
	   пакет отправится всем клиентам сети 

	- устройства с другим ip проигнорируют пакет

	C -> отправляет пакет на устройство A 
	содержащий mac-адрес и ip ARP RESPONSE
	 # пакет I HAVE 10.0.15.6 
	 # MY MAC is 00:11:22:33:44:66

---------------------------------------------------

ADDITIONAL MODULES SCAPY

git clone www.github.com/secdev/scapy.git
# github version

Install packet for python

sudo pacman -S python-scapy
# archlinux version 

apt install python-scapy
# kali verison 

---------------------------------------------------
NETWORK SCANNER ALGORITHM

GOAL - discover clients on network
Задача - обнаружить клиентов в сети

	1 - Создать arp запрос направленный на широковещательный
	адрес и узнать принадлежность MAC к определенным ip

	2 - Отправить пакет и обработать ответ

	3 - Спарсить ответы

	4 - Вывести результаты 




----------------------------------------------------

import scapy.all # сторонний модуль для работы с сетевыми протоколами

or

import scapy.all as scapy # импортировать модуль и переименовать
	# для удобного пользования модулем

	scapy.all.arping(ip)
		or
	scapy.arping(ip)

	scapy.arping("10.0.15.1") 
	# выводит мак адрес устройства с указанным ip

	scapy.arping("10.0.15.1/24") # /24 - сканирует всю подсеть
	# может не дать ответы и заблокировать доступ в сеть, если
	есть брендмаузер
	 - необходимо устанавливать timeout запроса 	


	arp_req = scapy.ARP() # метод создания ARP пакета

	arp_req.summary() # возвращает строку с инф. о пакете

	образец пакета без опций: ARP who has 0.0.0.0 says YOUR_IP 

	ARP who has 0.0.0.0 says 192.168.0.199

	scapy.ls(scapy.ARP()) # функция выводит список опции и полей
		# для определенного пакета класса scapy.ARP()

	
	# ВАРИАНЫ ЗАДАНИЯ ПОЛЕЙ

	arp_req = scapy.ARP(pdst=ip) # ARP who has psdt=ip says YOUR_IP
		or
	arp_req.pdst = ip 


	# BROADCAST REQUEST

	broadcast = scapy.Ether("ff:ff:ff:ff:ff:ff") 
		# создание ethernet фрейма для выполнения широковещательного запроса 
		or 
	broadcast.dst = "ff:ff:ff:ff:ff:ff"
	

	# CONCAT Ether + ARP

	arp_req_broad = broadcast/arp_req # объединяет ARP with Ether

	print(arp_req_broad.summary()) # выведет данные о новом пакете

	Ether / ARP who has 192.168.0.1/24 says 192.168.0.199 


	################

	arp_req_broad.show() # выводит более подробную инф. о пакете 

	
	# SEND PACKAGE 


	scapy.sr # функция send recieve отправить получить ответ

	scapy.srp(arp_req_broad()) # при кастомном вводе scapy.Ether(dst=)
		# нужно использовать srp так как был поменеян dst Ether 


