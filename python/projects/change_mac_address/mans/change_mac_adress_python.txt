# MAC CHANGER (СМЕНА МАК-адреса)

	РЕАЛИЗАЦИЯ на python c использованием модуля
	системных команд

	SUBPROCESS MODULE

	
	- SYNTAX:

	import subprocess
	subprocess.call("COMMAND",Shell=True)


	- исполнение команд выполняется на переднем плане

	- не создаетя фоновый процесс

	- не выделяется поток под команду

	
	>>> subprocess.call(["ls", "-l"])
	0
		# вызов системной команды с указанием аргумента
		 в списке

	>>> subpocess.call("exit 1", shell=True)
	1
		# вызов системной каманды одной конструкции
		 в строке 



	>>> subprocess.check_output(["echo", "Hello World!"])
	Hello World!\n
		# вызов системной команды с последующим возвращением
		 результата в качестве строки

	>>> subprocess.check_output("exit 1", shell=True)
	Traceback (most recent call last):
		...

	subprocess.CalledProcessError: Command 'exit 1' returned exit status 1

	#

	ifconfig_result = subprocess.check_output("ifconfig wlp3s0",
		universal_newlines=True)

	# функция check_output возвращает bytes array, и при использовании
	print(ifconfig_result) не будет выводит новую строку
		-- для того, чтобы вернулась строка необходимо указать
		аргумент universal_newlines=True
---------------------------------------------------------------------------

	import optparse # модуль продвинутого парсинга данных 
	parser = optparse.OptionParser() # возвращает объект Parser
	
	parser.add_option("flag short", "flag long", dest="name of var", 
		help="подсказка опции")
	
	(options, arguments) = parser.parse_args()
		# вызов функции parser.parse_args() и сохранение в диапазон

	parser.error("Message") # вывод сообщения при ошибке 


---------------------------------------------------------------------------

www.pythex.org - сайт для создания правил для регулярных выражений

	. - выбрать весь текст

	\d - выбрать все цифры 

	< - начинается на знак меньше
	
	<> - начинается на меньше заканчивается на больше

	<.*> - все что находится внутри
	
	\w - буквенно-цифровой формат 

	\w\w: - двойной буквенно цифровой # 5a:3d:01:6a:01

	\w\w:\w\w:\w\w:\w\w:\w\w:\w\w - #  5a:3d:01:6a:01:e2

	
import re # модуль регулярных выражений


current_mac = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w:")
	# возвращает массив при совпадении, в противном случае NULL

	current_mac.group(0) # обратиться к совпадению можно при
		помощи метода group(number)


a = None # NoneObject
print(str(a)) # привидение NoneObject к строке
	# вывод: None







